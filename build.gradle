plugins {
    id "java"
    id "idea"
    id "eclipse"
    id "maven-publish"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "org.cadixdev.licenser" version "0.5.0"
}

group "me.shedaniel"

def isSnapshot = System.getenv("PR_NUM") != null
def runNumber = (System.getenv("GITHUB_RUN_NUMBER") == null ? "9999" : System.getenv("GITHUB_RUN_NUMBER"))

if (!isSnapshot) {
    version = base_version + "." + runNumber
} else {
    version = base_version + "-PR." + System.getenv("PR_NUM") + "." + runNumber
}

logger.lifecycle(":building architectury transformer v${version}")

sourceCompatibility = targetCompatibility = 1.8

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.fabricmc.net/" }
    mavenCentral()
}

sourceSets {
    agent
    runtime {
        compileClasspath += sourceSets.main.runtimeClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += sourceSets.agent.runtimeClasspath
        runtimeClasspath += sourceSets.agent.runtimeClasspath
    }
}

license {
    header = rootProject.file("HEADER")

    ext {
        name = "shedaniel"
        year = "2020, 2021"
    }

    include "**/*.java"
}

dependencies {
    implementation "net.fabricmc:tiny-remapper:0.3.2-architectury.6"
    implementation "net.fabricmc:tiny-mappings-parser:0.2.2.14"
    implementation "org.ow2.asm:asm:9.1"
    implementation "org.ow2.asm:asm-commons:9.1"
    implementation "org.ow2.asm:asm-tree:9.1"
    implementation "org.ow2.asm:asm-util:9.1"
    implementation "com.google.guava:guava:29.0-jre"
    implementation "org.zeroturnaround:zt-zip:1.13"
    implementation "com.google.code.gson:gson:2.8.5"
    implementation "me.shedaniel.architectury:refmap-remapper:1.0.3"
    compileOnly "org.jetbrains:annotations:20.1.0"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}

task agentJar(type: Jar) {
    classifier "agent"
    manifest {
        attributes(
                "Premain-Class": "me.shedaniel.architectury.transformer.agent.TransformerAgent",
                "Agent-Class": "me.shedaniel.architectury.transformer.agent.TransformerAgent",
                "Can-Redefine-Classes": true,
                "Can-Retransform-Classes": true
        )
    }
    from sourceSets.agent.output
}

task agentSourcesJar(type: Jar, dependsOn: classes) {
    classifier "agent-sources"
    from sourceSets.agent.allSource
}

task runtimeJar(type: Jar, dependsOn: shadowJar) {
    classifier "runtime"
    manifest {
        attributes(
                "Main-Class": "me.shedaniel.architectury.transformer.TransformerRuntime",
                "Implementation-Version": project.version
        )
    }
    from {
        sourceSets.runtime.output + zipTree(shadowJar.archiveFile)
    }
}

task runtimeSourcesJar(type: Jar, dependsOn: classes) {
    classifier "runtime-sources"
    from sourceSets.runtime.allSource
}

jar {
    classifier "raw"
}

shadowJar {
    relocate "net.fabricmc", "me.shedaniel.architectury.transformer.shadowed.impl.net.fabricmc"
    relocate "org.objectweb", "me.shedaniel.architectury.transformer.shadowed.impl.org.objectweb"
    relocate "org.checkerframework", "me.shedaniel.architectury.transformer.shadowed.impl.org.checkerframework"
    relocate "org.zeroturnaround", "me.shedaniel.architectury.transformer.shadowed.impl.org.zeroturnaround"
    relocate "org.slf4j", "me.shedaniel.architectury.transformer.shadowed.impl.org.slf4j"
    relocate "com.google", "me.shedaniel.architectury.transformer.shadowed.impl.com.google"
    relocate "javax.annotation", "me.shedaniel.architectury.transformer.shadowed.impl.javax.annotation"
    relocate "me.shedaniel.architectury.refmapremapper", "me.shedaniel.architectury.transformer.shadowed.impl.me.shedaniel.architectury.refmapremapper"
    configurations = [project.configurations.runtimeClasspath]
    classifier "shadow"
}

task mainJar(type: Jar, dependsOn: shadowJar) {
    from zipTree(shadowJar.archiveFile)
}

build.dependsOn mainJar
build.dependsOn runtimeJar

publishing {
    publications {
        main(MavenPublication) {
            artifact(mainJar)
            artifact(sourcesJar)
        }
        runtime(MavenPublication) {
            artifact(runtimeJar)
            artifact(runtimeSourcesJar)
        }
        agent(MavenPublication) {
            artifact(agentJar)
            artifact(agentSourcesJar)
        }
    }

    repositories {
        if (System.getenv("MAVEN_PASS") != null) {
            maven {
                url = "https://deploy.shedaniel.me/"
                credentials {
                    username = "shedaniel"
                    password = System.getenv("MAVEN_PASS")
                }
            }
        }
    }
}